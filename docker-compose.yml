version: '3.8'

services:
  wordpress:
    image: wordpress:php8.2-fpm
    container_name: wordpress
    restart: unless-stopped
    env_file: .env
    environment:
      - WORDPRESS_DB_HOST=db
      - WORDPRESS_DB_USER=${MYSQL_USER}
      - WORDPRESS_DB_PASSWORD=${MYSQL_PASSWORD}
      - WORDPRESS_DB_NAME=${MYSQL_DATABASE}
      - WORDPRESS_CONFIG_EXTRA=${WORDPRESS_CONFIG_EXTRA}
      - WORDPRESS_DEBUG=${WORDPRESS_DEBUG}
      - WORDPRESS_ADMIN_USER=${WORDPRESS_ADMIN_USER}
      - WORDPRESS_ADMIN_PASSWORD=${WORDPRESS_ADMIN_PASSWORD}
      - WORDPRESS_ADMIN_EMAIL=${WORDPRESS_ADMIN_EMAIL}
    volumes:
      - ./wordpress:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./php/php.ini:/usr/local/etc/php/conf.d/php.ini:ro
      - ./wordpress/wp-init.sh:/docker-entrypoint-initwp.sh:ro
    networks:
      - wordpress-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    entrypoint: ["/bin/bash", "-c"]
    command: 
      - |
        cp /docker-entrypoint-initwp.sh /tmp/wp-init.sh
        chmod +x /tmp/wp-init.sh
        /tmp/wp-init.sh

  db:
    image: mariadb:10.6
    container_name: wordpress_db
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_DATABASE=$MYSQL_DATABASE
      - MYSQL_USER=$MYSQL_USER
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
    volumes:
      - dbdata:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
    networks:
      - wordpress-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  nginx:
    image: nginx:1.21-alpine
    container_name: wordpress_nginx
    restart: unless-stopped
    env_file: .env
    environment:
      - DOMAIN=${DOMAIN}
      - DOMAIN_WWW=${DOMAIN_WWW}
      - SSL_SESSION_TIMEOUT=${SSL_SESSION_TIMEOUT}
      - SSL_SESSION_CACHE=${SSL_SESSION_CACHE}
      - NGINX_RESOLVER=${NGINX_RESOLVER}
      - NGINX_RESOLVER_TIMEOUT=${NGINX_RESOLVER_TIMEOUT}
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./wordpress:/var/www/html:ro
      - ./wp-content:/var/www/html/wp-content:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/nginx/ssl:ro
      - ./certbot/data:/var/www/certbot:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - wordpress-network
    depends_on:
      wordpress:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    env_file: .env
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/data:/var/www/certbot
      - ./certbot/logs:/var/log/letsencrypt
    depends_on:
      nginx:
        condition: service_healthy

  # Redis for object caching
  redis:
    image: redis:6-alpine
    container_name: wordpress_redis
    restart: unless-stopped
    networks:
      - wordpress-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  wordpress:
  dbdata:
  redis_data:

networks:
  wordpress-network:
    driver: bridge
    name: wordpress_network 